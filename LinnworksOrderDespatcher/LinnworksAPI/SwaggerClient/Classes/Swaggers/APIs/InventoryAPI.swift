//
// InventoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class InventoryAPI {
    
    private var headers: [String : String]
    
    init(token: String)
    {
        self.headers = [String:String]()
        self.headers["Authorization"] = token
    }
    
    /**
     Add item(s)

     - parameter body: (body) The inventory item object(s) to be added to the system. The limit for number of items sent in a single request is 200 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func addInventoryItems(body: [InventoryItemAddRequest], completion: @escaping ((_ data: BatchResponse?,_ error: Error?) -> Void)) {
        addInventoryItemsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add item(s)
     - POST /inventory
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "Items" : [ {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  }, {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  } ],
  "TotalItems" : 0,
  "Result" : "SUCCESSFUL"
}}]
     - parameter body: (body) The inventory item object(s) to be added to the system. The limit for number of items sent in a single request is 200 

     - returns: RequestBuilder<BatchResponse> 
     */
    func addInventoryItemsWithRequestBuilder(body: [InventoryItemAddRequest]) -> RequestBuilder<BatchResponse> {
        let path = "/inventory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BatchResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: self.headers)
    }
    /**
     Delete item

     - parameter itemId: (path) The unique identifier for the item to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func deleteInventoryItem(itemId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteInventoryItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete item
     - DELETE /inventory/{item_id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter itemId: (path) The unique identifier for the item to delete 

     - returns: RequestBuilder<Void> 
     */
    func deleteInventoryItemWithRequestBuilder(itemId: UUID) -> RequestBuilder<Void> {
        var path = "/inventory/{item_id}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{item_id}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: self.headers)
    }
    /**
     Deletes item(s)

     - parameter ids: (query) Commas separated list of guids. Limited to 200 items 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func deleteInventoryItems(ids: String, completion: @escaping ((_ data: BatchResponse?,_ error: Error?) -> Void)) {
        deleteInventoryItemsWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes item(s)
     - DELETE /inventory
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "Items" : [ {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  }, {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  } ],
  "TotalItems" : 0,
  "Result" : "SUCCESSFUL"
}}]
     - parameter ids: (query) Commas separated list of guids. Limited to 200 items 

     - returns: RequestBuilder<BatchResponse> 
     */
    func deleteInventoryItemsWithRequestBuilder(ids: String) -> RequestBuilder<BatchResponse> {
        let path = "/inventory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ids": ids
        ])


        let requestBuilder: RequestBuilder<BatchResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: self.headers)
    }
    /**
     Get Categories

     - parameter completion: completion handler to receive the data and the error objects
     */
    func getCategories(completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        getCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Categories
     - GET /inventory/categories
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example=[ {
  "CategoryId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "CategoryName" : "CategoryName"
}, {
  "CategoryId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "CategoryName" : "CategoryName"
} ]}]

     - returns: RequestBuilder<[Category]> 
     */
    func getCategoriesWithRequestBuilder() -> RequestBuilder<[Category]> {
        let path = "/inventory/categories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: self.headers)
    }
    /**
     Get item

     - parameter itemId: (path) The unique identifier for the item to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func getInventoryItem(itemId: UUID, completion: @escaping ((_ data: InventoryItem?,_ error: Error?) -> Void)) {
        getInventoryItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get item
     - GET /inventory/{item_id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "CreationDate" : "2000-01-23",
  "Category" : "Category",
  "IsBatchedStockType" : true,
  "IsVariationParent" : true
}}]
     - parameter itemId: (path) The unique identifier for the item to retrieve 

     - returns: RequestBuilder<InventoryItem> 
     */
    func getInventoryItemWithRequestBuilder(itemId: UUID) -> RequestBuilder<InventoryItem> {
        var path = "/inventory/{item_id}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{item_id}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InventoryItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: self.headers)
    }
    /**
     Get items by ids

     - parameter ids: (query) Commas separated list of guids. Limited to 200 items 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func getInventoryItems(ids: String, completion: @escaping ((_ data: [InventoryItem]?,_ error: Error?) -> Void)) {
        getInventoryItemsWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get items by ids
     - GET /inventory
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example=[ {
  "CreationDate" : "2000-01-23",
  "Category" : "Category",
  "IsBatchedStockType" : true,
  "IsVariationParent" : true
}, {
  "CreationDate" : "2000-01-23",
  "Category" : "Category",
  "IsBatchedStockType" : true,
  "IsVariationParent" : true
} ]}]
     - parameter ids: (query) Commas separated list of guids. Limited to 200 items 

     - returns: RequestBuilder<[InventoryItem]> 
     */
    func getInventoryItemsWithRequestBuilder(ids: String) -> RequestBuilder<[InventoryItem]> {
        let path = "/inventory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ids": ids
        ])


        let requestBuilder: RequestBuilder<[InventoryItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: self.headers)
    }
    /**
     Update item

     - parameter body: (body) The fields of the inventory item to update. Fields not provided will be left untouched. &#x27;Id&#x27; is ignored and taken from the path. 
     - parameter itemId: (path) The unique identifier for the item to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func updateInventoryItem(body: InventoryItem, itemId: UUID, completion: @escaping ((_ data: InventoryItem?,_ error: Error?) -> Void)) {
        updateInventoryItemWithRequestBuilder(body: body, itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update item
     - PATCH /inventory/{item_id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "CreationDate" : "2000-01-23",
  "Category" : "Category",
  "IsBatchedStockType" : true,
  "IsVariationParent" : true
}}]
     - parameter body: (body) The fields of the inventory item to update. Fields not provided will be left untouched. &#x27;Id&#x27; is ignored and taken from the path. 
     - parameter itemId: (path) The unique identifier for the item to update 

     - returns: RequestBuilder<InventoryItem> 
     */
    func updateInventoryItemWithRequestBuilder(body: InventoryItem, itemId: UUID) -> RequestBuilder<InventoryItem> {
        var path = "/inventory/{item_id}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{item_id}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InventoryItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: self.headers)
    }
    /**
     Update items

     - parameter body: (body) A collection of inventory items to update. The limit for number of items sent in a single request is 200 
     - parameter completion: completion handler to receive the data and the error objects
     */
    func updateInventoryItems(body: [InventoryItem], completion: @escaping ((_ data: BatchResponse?,_ error: Error?) -> Void)) {
        updateInventoryItemsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update items
     - PATCH /inventory
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - examples: [{contentType=application/json, example={
  "Items" : [ {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  }, {
    "Item" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Message" : "Message",
    "Links" : {
      "Type" : "GET",
      "Href" : "Href"
    },
    "Result" : "SUCCESSFUL"
  } ],
  "TotalItems" : 0,
  "Result" : "SUCCESSFUL"
}}]
     - parameter body: (body) A collection of inventory items to update. The limit for number of items sent in a single request is 200 

     - returns: RequestBuilder<BatchResponse> 
     */
    func updateInventoryItemsWithRequestBuilder(body: [InventoryItem]) -> RequestBuilder<BatchResponse> {
        let path = "/inventory"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BatchResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: self.headers)
    }
}
